-- programs ------------------------------------------------

entrypoints Program ;

Program.   Program ::= [Stmt] ;

-- statements ----------------------------------------------

separator  Stmt "" ;

Empty.     Stmt ::= ";" ;

BStmt.     Stmt ::= "{" [Stmt] "}" ;

Decl.      Stmt ::= Type Item ";" ;

FunDecl.   Stmt ::= Type Ident "(" [Arg] ")" "{" [Stmt] "}" ;

ExDecl.    Stmt ::= "exception" Ident ";" ;

ValArg.    Arg ::= Type Ident ; 

VarArg.    Arg ::= Type "*" Ident;

DefArg.    Arg ::= Type Ident "default" Expr ;

separator  Arg "," ;

NoInit.    Item ::= Ident ; 

Init.      Item ::= Ident "=" Expr ;

Ass.       Stmt ::= Ident "=" Expr  ";" ;

Incr.      Stmt ::= Ident "++"  ";" ;

Decr.      Stmt ::= Ident "--"  ";" ;

Ret.       Stmt ::= "return" Expr ";" ;

VRet.      Stmt ::= "return" ";" ;

Cond.      Stmt ::= "if" "(" Expr ")" Stmt  ;

CondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ;

While.     Stmt ::= "while" "(" Expr ")" Stmt ;

For.       Stmt ::= "for" "(" Type Ident "=" Expr ":" Expr ")" Stmt ;

SPrint.    Stmt ::=  "print" "(" [Expr] ")" ";" ;

Cont.      Stmt ::= "continue" ";" ;

Brk.     Stmt ::= "break" ";" ;

DynOn.     Stmt ::= "dynamic" "on" ";" ;

DynOff.    Stmt ::= "dynamic" "off" ";" ;

Except.    Stmt ::= "try" Stmt "catch" Ident "(" Expr ")" Stmt ;

Throw.     Stmt ::= "throw" Ident "(" Expr ")" ";" ;

Call.      Stmt ::= Ident "(" [Expr] ")"  ";" ;

-- Types ---------------------------------------------------

Int.       Type ::= "int" ;

Str.       Type ::= "string" ;

Bool.      Type ::= "bool" ;

Void.      Type ::= "void" ;

separator  Type "," ;

-- Expressions ---------------------------------------------

EVar.      Expr6 ::= Ident ;

ELitInt.   Expr6 ::= Integer ;

ELitTrue.  Expr6 ::= "true" ;

ELitFalse. Expr6 ::= "false" ;

EApp.      Expr6 ::= Ident "(" [Expr] ")" ;

EString.   Expr6 ::= String ;

Neg.       Expr5 ::= "-" Expr6 ;

Not.       Expr5 ::= "!" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ECon.      Expr3 ::= Expr3 "++" Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       Expr ::= Expr1 "||" Expr ;

coercions  Expr 6 ;

separator  Expr "," ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;

